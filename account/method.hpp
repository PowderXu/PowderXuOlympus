// Olympus: mcp C++ client, tools and libraries.
// Licensed under the GNU General Public License, Version 3.

/// @file
/// This file defines contract abi.
#pragma once

#include "argument.hpp"

namespace dev
{
	enum FunctionType
	{
		/// Constructor represents the constructor of the contract.
		/// The constructor function is called while deploying a contract.
		Constructor = 0,
		/// Fallback represents the fallback function.
		/// This function is executed if no other function matches the given function
		/// signature and no receive function is specified.
		Fallback,
		/// Receive represents the receive function.
		/// This function is executed on plain Ether transfers.
		Receive,
		/// Function represents a normal function.
		Function
	};

	class Method
	{
	public:
		Method(){}
		Method(std::string const& _name, std::string const& _RawName, FunctionType const& _Type, 
			std::string const& _StateMutability, bool const& _Constant, bool const& _Payable,
			Arguments const& _Inputs, Arguments const& _Outputs, std::string const& _str,
			std::string const& _Sig, dev::bytes const& _ID
		):
			Name(_name),
			RawName(_RawName),
			Type(_Type),
			StateMutability(_StateMutability),
			Constant(_Constant),
			Payable(_Payable),
			Inputs(_Inputs),
			Outputs(_Outputs),
			str(_str),
			Sig(_Sig),
			ID(_ID)
		{}

		/// Name is the method name used for internal representation. It's derived from
		/// the raw name and a suffix will be added in the case of a function overload.
		///
		/// e.g.
		/// These are two functions that have the same name:
		/// * foo(int,int)
		/// * foo(uint,uint)
		/// The method name of the first one will be resolved as foo while the second one
		/// will be resolved as foo0.
		std::string Name;
		std::string RawName; /// RawName is the raw method name parsed from ABI
		/// Type indicates whether the method is a
		/// special fallback introduced in solidity v0.6.0
		FunctionType Type;
		/// StateMutability indicates the mutability state of method,
		/// the default value is nonpayable. It can be empty if the abi
		/// is generated by legacy compiler.
		std::string StateMutability;
		/// Legacy indicators generated by compiler before v0.6.0
		bool Constant;
		bool Payable;

		Arguments Inputs;
		Arguments Outputs;
		std::string str;
		/// Sig returns the methods string signature according to the ABI spec.
		/// e.g.		function foo(uint32 a, int b) = "foo(uint32,int256)"
		/// Please note that "int" is substitute for its canonical representation "int256"
		std::string Sig;
		/// ID returns the canonical representation of the method's signature used by the
		/// abi definition to identify method names and types.
		dev::bytes ID;
	};

	/// NewMethod creates a new Method.
	/// A method should always be created using NewMethod.
	/// It also precomputes the sig representation and the string representation
	/// of the method.
	Method NewMethod(std::string const& _name, std::string const& _RawName, FunctionType const& _Type,
		std::string const& _StateMutability, bool const& _Constant, bool const& _Payable,
		Arguments const& _Inputs, Arguments const& _Outputs);
}

